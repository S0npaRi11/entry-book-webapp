{"version":3,"sources":["controllers/user.js","components/Register.js","components/partials/_Header.js","components/partials/_AddBook.js","components/partials/_Books.js","components/partials/_BooksList.js","controllers/book.js","controllers/additionals.js","components/UserDashboard.js","components/partials/_UpdateEntry.js","components/partials/_Entries.js","components/partials/_EntryList.js","components/partials/_AddEntry.js","controllers/entry.js","components/BookDashboard.js","components/partials/_UpdateUser.js","components/Profile.js","components/partials/_Message.js","components/partials/_MessagesList.js","components/partials/_SendMessageForm.js","components/Messages.js","components/404.js","components/500.js","App.js","reportWebVitals.js","index.js"],"names":["URL","createUser","formData","a","fetch","method","headers","body","JSON","stringify","data","register","readOneUser","userID","token","json","readOne","updateOneUser","updateOne","logInUser","logIn","readAllBooksOfUser","readAllBooks","readAllMessagesOfUser","readAllMessages","deleteOneMessageOfUser","messageID","deleteOneMessage","sendOneMessageOfUser","senderID","sendOneMessage","Register","useState","firstName","setFirstName","lasttName","setLastName","mobileNumber","setMobileNumber","email","setEmail","password","setPassword","history","useHistory","onSubmit","e","preventDefault","alert","lastName","then","push","className","Row","htmlFor","type","id","required","autoFocus","value","onChange","target","placeholder","to","Header","user","Navbar","collapseOnSelect","expand","bg","variant","Container","Brand","href","Toggle","aria-controls","Collapse","Nav","AddBook","addBook","bookTitle","setBookTitle","creatorID","title","users","Books","book","onDelete","creationDate","Date","Card","Body","Title","Subtitle","toDateString","Text","totalReceived","totalDept","totalPaid","Link","onClick","_id","BooksList","books","length","map","readOneBook","bookID","createOneBook","createOne","deleteOneBook","deleteOne","getCookie","cname","name","ca","decodeURIComponent","document","cookie","split","i","c","charAt","substring","indexOf","Dashboard","formToggle","setFormToggle","setBooks","userName","undefined","useEffect","allBooks","result","fetchedBooks","deleteBook","filter","Button","UpdateEntry","onUpdate","entry","entryValue","setEntryValue","amount","console","log","Entries","toggleForm","setToggleForm","entryTitle","entryCreatorID","recipient","details","EntryList","entries","AddEntry","onAdd","setEntryTitle","entryType","setEntryType","setRecipient","setAmount","createOneEntry","updateOneEntry","entryID","deleteOneEntry","BookDashboard","setEntries","useParams","requiredBook","addEntry","newAddedEntries","deleteEntry","updateEntry","UpdateUser","Profile","MNO","setMNO","readLoggedInUser","updatePass","varient","Message","message","meg","senderFirstName","senderLastName","_MessagesList","messages","SendMessageForm","idValue","setIdValue","setMessage","msg","Messages","messageFormToggle","setMessageFormToggle","setMessages","getMessages","sendMessage","receiverID","deleteMessages","Error404","Error500","App","redirect","setRedirect","redirectTo500","setRedirectTo500","exact","path","render","props","component","UserDashboard","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.924e45c0.chunk.js","sourcesContent":["// contains all the fetch methods for user\n\nconst URL = 'https://entry-book.herokuapp.com';\n\n\n// create user (register)\nconst createUser = async (formData) => {\n    const data = await fetch(URL+'/user',{\n        method: 'POST',\n        headers:{\n            'Access-Control-Allow-Origin': '*',\n            'Content-Type':'application/json'\n        },\n        body: JSON.stringify(formData)\n    });\n\n    return data\n}\n\nexport const register = createUser;\n\n// read a single user with id\nconst readOneUser = async(userID,token) => {\n    // const id = typeof(userID) === 'string' ? userID : userID.toString();\n    const data = await fetch(URL+'/user/'+userID,{\n        headers:{\n            'auth-token': token\n        }\n    })\n\n    return data.json()\n}\n\nexport const readOne = readOneUser\n\n// update a single user with id\nconst updateOneUser = async(userID,token, formData) => {\n    // const id = typeof(userID) === 'string' ? userID : userID.toString();\n    const data = await fetch(URL+'/user/'+userID,{\n        method: 'PATCH',\n        headers:{\n            'Content-Type':'application/json',\n            'auth-token': token\n        },\n        body: JSON.stringify(formData)\n    })\n\n    return data.json()\n}\n\nexport const updateOne = updateOneUser\n\n// delete a single user with id\nconst deleteOneUser = async(userID,token) => {\n    const id = typeof(userID) === 'string' ? userID : userID.toString();\n    const data = await fetch(URL+'/user/'+id,{\n        method: 'DELETE',\n        headers:{\n            'auth-token': token\n        }\n    })\n\n    return data.json()\n}\n\nexport const deleteOne = deleteOneUser\n\n// login\nconst logInUser = async(formData) => {\n    const data = await fetch(URL+'/user/login',{\n        method: 'POST',\n        headers:{\n            'Content-Type':'application/json'\n        },\n        body: JSON.stringify(formData)\n    })\n\n    return data.json()\n}\n\nexport const logIn = logInUser\n\n// read all users\nconst readAllUsers = async (token) => {\n    const data = await fetch(URL+'/user',{\n        headers:{\n            'auth-token': token\n        }\n    })\n\n    return data.json()\n}\n\nexport const readAll = readAllUsers\n\n// view all the books of the user\nconst readAllBooksOfUser = async(token) => {\n    const data = await fetch(URL+'/user/books',{\n        headers:{\n            'auth-token': token\n        }\n    })\n\n    return data.json()\n}\n\nexport const readAllBooks = readAllBooksOfUser\n\n// read messages\nconst readAllMessagesOfUser = async(token) => {\n    const data = await fetch(URL+'/user/messages',{\n        headers:{\n            'auth-token':token\n        }\n    })\n\n    return await data.json()\n}\n\nexport const readAllMessages = readAllMessagesOfUser    \n\n// read a single message\nconst readOneMessageOfUser = async (token,userID) => {\n    // const id = typeof(userID) === 'string' ? userID : userID.toString();\n    const data = await fetch(URL+'/user/message/'+userID,{\n        headers:{\n            'auth-token': token\n        }\n    })\n\n    return data.json()\n\n}\n\nexport const readOneMessage = readOneMessageOfUser\n\n// delete message\nconst deleteOneMessageOfUser = async (token,messageID) => {\n    // const id = typeof(userID) === 'string' ? userID : userID.toString();\n    const data = await fetch(URL+'/user/message/'+messageID,{\n        method: 'DELETE',\n        headers:{\n            'auth-token': token\n        }\n    })\n\n    return data.json()\n\n}\n\nexport const deleteOneMessage = deleteOneMessageOfUser\n\n// send a message\nconst sendOneMessageOfUser = async (token,senderID,formData) => {\n    // const id = typeof(userID) === 'string' ? userID : userID.toString();\n    const data = await fetch(URL+'/user/message/'+senderID,{\n        method: 'POST',\n        headers:{\n            'Content-Type':'application/json',\n            'auth-token': token\n        },\n        body: JSON.stringify(formData)\n    })\n\n    return data.json()\n\n}\n\nexport const sendOneMessage = sendOneMessageOfUser\n\n// reaquest a book\nconst requestBookToUser = async (token, bookID) => {\n    // const id = typeof(bookID) === 'string' ? bookID : bookID.toString()\n    const data = await fetch(URL+'/user/request/'+bookID,{\n        headers:{\n            'auth-token': token\n        }\n    })\n\n    return data.json()\n}\n\nexport const requestBook = requestBookToUser\n\n// default export \nconst user = {\n    register: createUser,\n    logIn: logInUser,\n    readOne: readOneUser,\n    updateOne: updateOneUser,\n    deleteOne: deleteOneUser,\n    readAll: readAllUsers,\n    readAllBooks: readAllBooksOfUser,\n    readAllMessages: readAllMessagesOfUser,\n    readOneMessage: readOneMessageOfUser,\n    deleteOneMessage: deleteOneMessageOfUser,\n    sendOneMessage: sendOneMessageOfUser,\n    requestBook: requestBookToUser\n}\n\nexport default user","import { useState } from 'react';\nimport { Link, useHistory } from 'react-router-dom'\nimport Row  from 'react-bootstrap/Row';\n\n// importing regsiter user function\nimport { register } from '../controllers/user'\n\nconst Register = () => {\n\n    const [firstName, setFirstName] = useState('')\n    const [lasttName, setLastName] = useState('')\n    const [mobileNumber, setMobileNumber] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n\n    const history = useHistory();\n\n    const onSubmit = async (e) => {\n        e.preventDefault();\n\n      \n\n        if(!firstName&& !lasttName && !mobileNumber && !email && !password){\n            alert(' Please fill in the required fields. ')\n            return\n        }\n\n        // here we will register the user\n        const formData = {\n            firstName: firstName,\n            lastName: lasttName,\n            mobileNumber: mobileNumber,\n            email: email,\n            password: password\n        }\n\n        const user = await register(formData)\n        \n        user.json().then(data => {\n            history.push('/')\n        })\n    \n        // set the fields to blank\n        setFirstName('')\n        setLastName('')\n        setMobileNumber('')\n        setEmail('')\n        setPassword('')\n    }\n\n    return (\n        <div className=\"register-form-wrapper\">\n            <form onSubmit={ onSubmit } className='form-register'>\n                <h1 className=\"page-title mb-3 font-weight-normal\"> Register </h1>\n                <Row>\n                    <div className=\"col-sm-6\">\n                        <br />\n                        <label htmlFor='firstName'> First Name </label>\n                        <input type='text' id='firstName' className='form-control' required autoFocus value={ firstName } onChange={ (e) => setFirstName(e.target.value) } placeholder='Enter your first Name'/>\n                    </div>\n                    <div className=\"col-sm-6\">\n                        <br />\n                        <label htmlFor='lastName'> Last Name </label>\n                        <input type='text' id='lasttName' className='form-control' required autoFocus value={ lasttName } onChange={ (e) => setLastName(e.target.value) } placeholder='Enter your last name'/>\n                    </div>\n                   \n                    <div className=\"col-sm-12\">\n                        <br />\n                        <label htmlFor='mobileNumber'> Mobile Number </label>\n                        <input type='text' id='mobileNumber' className='form-control' required autoFocus value={ mobileNumber } onChange={ (e) => setMobileNumber(e.target.value) } placeholder='Enter your mobile number'/>\n                    </div>\n                  \n                    <div className=\"col-sm-12\">\n                        <br />\n                        <label htmlFor='email'> Email </label>\n                        <input type='email' id='email' className='form-control' required autoFocus value={ email } onChange={ (e) => setEmail(e.target.value) }  placeholder='Enter your email address'/>\n                    </div>\n                  \n                    <div className=\"col-sm-12\">\n                        < br />\n                        <label htmlFor='password'> Password </label>\n                        <input type='password' id='password' className='form-control' required autoFocus value={ password } onChange={ (e) => setPassword(e.target.value) } placeholder='Enter your password'/>\n                    </div>\n                </Row>\n                <br />\n\n                <input type='submit' className='btn btn-primary btn-block' value='register' />\n                <br />\n\n                <p> Already refistered? <Link to='/'> Login here. </Link> </p>\n            </form>\n        </div>\n    )\n}\n\nexport default Register\n","import { Link } from 'react-router-dom';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Container from 'react-bootstrap/Container';\n// import NavDropdown from 'react-bootstrap/NavDropdown'\nimport Nav from 'react-bootstrap/Nav'\nimport { FaEnvelope, FaUserCircle } from 'react-icons/fa'\n\n\n// header will take user name, id, and other stuff as props\nconst Header = ({ user }) => {\n    return (\n        <>\n        {/* <Router> */}\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n                <Container>\n                    <Navbar.Brand href=\"#home\"> {user} </Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n                    <Navbar.Collapse id=\"responsive-navbar-nav\">\n                        <Nav className=\"mr-auto\">\n                        </Nav>\n                        <Nav>\n                        <Link className='nav-link' to=\"/profile\"> <FaUserCircle />&nbsp;Profile </Link>\n                        <Link className='nav-link' to=\"/messages\"> <FaEnvelope />&nbsp;Messages </Link>\n\n                        </Nav>\n                    </Navbar.Collapse>\n                </Container>\n            </Navbar>\n        {/* </Router> */}\n        </>\n    )\n}\n\nexport default Header\n","import { useState } from 'react';\n\n//import { createOne } from '../../controllers/book'\n\nconst AddBook = ({ token, addBook, user }) => {\n\n    const [bookTitle, setBookTitle] = useState('');\n\n    const onSubmit = async (e) => {\n        e.preventDefault()\n        if(!bookTitle){\n            alert('Please give the book a title');\n            return\n        }\n\n        // here, we will create a new book\n        const formData = {\n            creatorID: user,\n            title: bookTitle,\n            users: user\n        }\n\n        addBook(token, formData)\n    \n        // reset the input.value\n        setBookTitle(''); \n    }\n\n    return (\n        <form className='addBook-form' onSubmit={ onSubmit }>\n            <br />\n           <input type='text' id='bookTitle' required autoFocus className='form-control' placeholder='Enter Book Title' value={ bookTitle } onChange={ (e) => setBookTitle(e.target.value)}/>\n           <input type='submit' className='btn btn-primary'  value='Add Book'/>\n        </form>\n    )\n}\n\nexport default AddBook\n","import { Link } from 'react-router-dom'\nimport Card from 'react-bootstrap/Card';\nimport Row from 'react-bootstrap/Row';\n\n// This will render the book card\n\n// This will take the book as the prop\nconst Books = ({ book, onDelete, token }) => {\n\n    const creationDate = new Date(book.creationDate)\n    return (\n        <div className=\"col-sm-4 book-wrapper\" >\n        <Card className=\"book-card\">\n            <Card.Body>\n                <Card.Title className=\"book-title\">\n                  {book.title}\n                </Card.Title>\n                <Card.Subtitle className=\"book-creator\">  Created At : { creationDate.toDateString() } </Card.Subtitle>\n                <Card.Text className=\"book-info\">\n                    <Row>\n                        <div className='col-lg-4'>\n                            <p> Received </p>\n                            {book.totalReceived}\n                        </div>\n                        <div className='col-lg-4'>\n                            <p>  Dept </p>\n                            {book.totalDept}\n                        </div>\n                        <div className='col-lg-4'>\n                            <p>  Paid </p>\n                            {book.totalPaid}\n                        </div>\n                    </Row>\n                </Card.Text>\n                <Card.Link className='btn btn-primary' onClick = {() => onDelete(token, book._id) }> Delete </Card.Link>\n                <Link to= { `/book/${book._id}` } className='btn btn-success card-link' > More info </Link>\n            </Card.Body>\n        </Card>\n        </div>\n    )\n}\n\nexport default Books\n","import Row from 'react-bootstrap/Row'\nimport Books from './_Books';\n\nconst BooksList = ({ books, onDelete, token }) => {\n\n    return (\n       <>\n           {books.length === 0 ? 'No Books Found' :\n             <Row className=\"book-list\">\n                { books.map((book) => (\n                    <Books key={ book._id } book = { book } onDelete={ onDelete } token = { token }/> \n                )) }\n            </Row>\n           }\n       </>\n    )\n}\n\nexport default BooksList\n","// contains all the fetch methods for book\n\nconst URL = 'https://entry-book.herokuapp.com';\n\n\n// read all books\nconst readAllBooks = async(token) => {\n    const data=  await fetch(URL+'/book',{\n        headers:{\n        'auth-token': token,\n        }\n    })\n\n    return data.json()\n}\n\nexport const readAll = readAllBooks\n\n// read a book\nconst readOneBook = async(token, bookID) => {\n    // const id = typeof(bookID) === 'string' ? bookID : bookID.toString();\n    const data = await fetch(URL+'/book/'+bookID,{\n        headers:{\n            'auth-token': token\n        }\n    })\n\n    return data.json()\n}\n\nexport const readOne = readOneBook\n\n// create a book\nconst createOneBook = async(token,formData) => {\n    const data = await fetch(URL+'/book',{\n        method: 'POST',\n        headers:{\n            'Content-Type': 'application/json',\n            'auth-token': token\n        },\n        body: JSON.stringify(formData)\n    })\n\n    return data.json()\n}\n\nexport const createOne = createOneBook\n\n// update a book \nconst updateOneBook = async(token, bookID,formData) => {\n    // const id = typeof(bookID) === 'string' ? bookID : bookID.toString();\n    const data = await fetch(URL+'/book/'+bookID,{\n        method: 'PATCH',\n        headers:{\n            'Content-Type':'application/json',\n            'auth-token': token\n        },\n        body: JSON.stringify(formData)\n    })\n\n    return data.json()\n}\n\nexport const updateOne = updateOneBook\n\n// delete a book\nconst deleteOneBook = async(token, bookID) => {\n    // const id = typeof(bookID) === 'string' ? bookID : bookID.toString()\n    const data = await fetch(URL+'/book/'+bookID,{\n        method: 'DELETE',\n        headers:{\n            'auth-token': token\n        }\n    })\n\n    return data.json()\n}\n\nexport const deleteOne = deleteOneBook\n\n// view all users of the book\nconst readAllUsersOfBook = async(token, bookID) => {\n    // const id = typeof(bookID) === 'string' ? bookID : bookID.toString()\n    const data = await fetch(URL+'/book/user/'+bookID,{\n        headers:{\n            'auth-token': token\n        }\n    })\n\n    return data.json()\n}\n\nexport const readAllUsers = readAllUsersOfBook\n\n// default export\nconst book = {\n    readAll: readAllBooks,\n    readOne: readOneBook,\n    createOne: createOneBook,\n    updateOne: updateOneBook,\n    deleteOne: deleteOneBook,\n    readAllUsers: readAllUsersOfBook\n}\n\nexport default book","function getCookie(cname) {\n    var name = cname + \"=\";\n    var decodedCookie = decodeURIComponent(document.cookie);\n    var ca = decodedCookie.split(';');\n    for(var i = 0; i <ca.length; i++) {\n      var c = ca[i];\n      while (c.charAt(0) === ' ') {\n        c = c.substring(1);\n      }\n      if (c.indexOf(name) === 0) {\n        return c.substring(name.length, c.length);\n      }\n    }\n    return \"\";\n  }\n\nexport default getCookie","import { useState,useEffect } from 'react'\nimport { useHistory } from 'react-router-dom';\nimport Container from 'react-bootstrap/Container'\nimport Button from 'react-bootstrap/Button'\nimport Header from './partials/_Header'\nimport AddBook from './partials/_AddBook'\nimport BooksList from './partials/_BooksList';\n\nimport { readAllBooks } from '../controllers/user'\nimport { createOne } from '../controllers/book'\nimport { deleteOne } from '../controllers/book'\n\nimport getCookie from '../controllers/additionals'\n\nconst Dashboard = () => {\n\n    const [formToggle, setFormToggle] = useState(false)\n    const [books, setBooks] = useState([])\n\n    const history = useHistory()\n\n    const token = getCookie('token');\n    const userID = getCookie('entry-app-user-id');\n    const userName = getCookie('entry-app-user-name');\n    // console.log(user)\n\n    if(token === undefined){\n        history.push('/')\n    }\n\n    // use onEffect to get all the books of the user\n    useEffect(() => {\n        const fetchedBooks = async () => {\n           try {\n                const allBooks = await readAllBooks(token)\n                if(allBooks.result !== null){\n                    setBooks(allBooks.result)\n                }else{\n                    history.push('/500')\n                }\n           } catch (error) {\n                history.push('/500')   \n           }\n        }\n        fetchedBooks()\n    }, [books,token,history])\n\n    // Add Book function\n    const addBook = async (token, formData) => {\n        const data = await createOne(token,formData)\n        setBooks([...books, data.result])\n    }\n\n    // Delete book function\n    const deleteBook = async (token, id) => {\n        await deleteOne(token, id)\n        // setBooks([...books, data.result])\n        setBooks(books.filter((book) => book._id !== id))\n    }\n\n\n    return (\n        <>\n        <Header user = { userName }/>\n        <Container>\n           <h1 className=\"page-title font-weight-normal mb-3\"> Books </h1>\n           <Button className=\"btn btn-primary\" onClick = { () => setFormToggle(!formToggle) }>\n               Add new Book\n           </Button>\n\n           { formToggle && <AddBook  token = { token } addBook = { addBook } user = { userID }/> } \n\n           <BooksList books = { books } onDelete = { deleteBook } token ={ token } />\n        </Container>\n        </>\n    )\n}\n\nexport default Dashboard\n","import { useState } from 'react'\n\nconst UpdateEntry = ({ onUpdate, bookID, entry, token }) => {\n\n    const [entryValue, setEntryValue] = useState(0)\n\n    const onSubmit = (e) => {\n        e.preventDefault()\n\n        if(entryValue <= 0){\n            alert('Please enter value.')\n            return\n        }\n\n        // here we will update the entry value\n        const formData = entry\n        formData.amount = entryValue\n\n        const data = onUpdate(bookID, entry._id, token, formData)\n        console.log(data)\n        // reset the field\n        setEntryValue(0);\n    }\n\n    return (\n        <form onSubmit = { onSubmit } className='form-update-entry'>\n            <br />\n            <input type='number' className='form-control' id='updateEntryVal' value={ entryValue } onChange={ (e) => setEntryValue(e.target.value) } placeholder='Enter Updated value'/>\n            <input type='submit' value='Update Entry' className='btn btn-primary' />\n        </form>\n    )\n}\n\nexport default UpdateEntry\n","import { useState } from 'react'\nimport Card from 'react-bootstrap/Card'\nimport UpdateEntry from './_UpdateEntry'\n\nconst Entries = ({ entry, token, bookID, onDelete, onUpdate }) => {\n\n    const [toggleForm, setToggleForm] = useState(false);\n\n    const toggleUpdateEntryForm = (e) => {\n        e.preventDefault()\n        setToggleForm(!toggleForm)\n    }\n\n    return (\n        <div className='col-md-6'>\n            <Card className='entry-card'>\n            <Card.Body>\n                <Card.Title className=\"entry-title\">\n                    { entry.entryTitle }\n                </Card.Title>\n                <Card.Subtitle className=\"entry-creator\"> { entry.entryCreatorID } </Card.Subtitle>\n                <Card.Text className=\"entry-info\">\n                    <p> Amount : { entry.amount } </p>\n                    <p> Type : { entry.type } </p>\n                    <p> Recipient : { entry.recipient } </p>\n                    <p> Details : { entry.details } </p>\n                </Card.Text>\n                {entry.type === 'dept' && <Card.Link className='btn btn-primary' onClick={ toggleUpdateEntryForm }> Update </Card.Link>}{/* Make update entries visible only if entries are of type dept */}\n                <Card.Link onClick = { () => onDelete(bookID, entry._id, token) }> Delete </Card.Link> \n\n                { toggleForm && <UpdateEntry  onUpdate = { onUpdate } bookID = { bookID } entry = { entry } token = { token }/> }\n            </Card.Body>        \n        </Card>\n        </div>\n    )\n}\n\nexport default Entries\n","import Row from 'react-bootstrap/Row'\nimport Entries from './_Entries'\n\nconst EntryList = ({ entries, token, bookID, onDelete, onUpdate }) => {\n    return (\n        <Row className='entry-list'>\n            {entries.length === 0 ?  'No entries found' \n                :entries.map((entry) => (\n                    <Entries key = { entry._id } token ={ token } bookID = { bookID } entry ={ entry } onDelete = { onDelete } onUpdate = { onUpdate }/>\n                ))\n            }\n        </Row>\n    )\n}\n\nexport default EntryList\n","import { useState } from 'react'\nimport Row from 'react-bootstrap/Row'\n\nconst AddEntry = ({ onAdd, bookID, token, userID }) => {\n\n    const [entryTitle, setEntryTitle] = useState('');\n    const [entryType, setEntryType] = useState('paid');\n    const [recipient, setRecipient] = useState('');\n    const [amount, setAmount] = useState(0);\n\n    const onSubmit = (e) => {\n        e.preventDefault()\n\n        if(!entryTitle && !entryType && !recipient && amount === 0 ){\n            alert('Fill all the necessary fields.')\n            return\n        }\n\n        const formData = {\n            entryTitle: entryTitle,\n            amount: amount,\n            type: entryType,\n            recipient: recipient,\n            entryCreatorID: userID,\n            bookID: bookID\n        }\n\n        // This is where we add new entry\n        onAdd(bookID, token,formData)\n\n        // reset the values\n        setEntryTitle('');\n        setEntryType('paid');\n        setRecipient('');\n        setAmount(0)\n    }\n\n    return (\n        <form className='form-register' onSubmit={ onSubmit }>\n            <Row>\n                <div className='col-sm-6'>\n                    <br />\n                    <input type='text' id='entryTitle' className='form-control' value={ entryTitle } onChange={ (e) => setEntryTitle(e.target.value) } placeholder='Enter Title' required/>\n                </div>\n                <div className='col-sm-6'>\n                    <br />\n                    <input type='text' id='entryType' className='form-control' value={ entryType } onChange={ (e) => setEntryType(e.target.value) } placeholder='Enter type' required/>  \n                </div>\n                <div className='col-sm-6'>\n                    <br />\n                    <input type='text' id='recipient' className='form-control' value={ recipient } onChange={ (e) => setRecipient(e.target.value) } placeholder='Enter recipient' required/>\n                </div>\n                <div className='col-sm-6'>\n                    <br />\n                    <input type='number' id='amount' className='form-control' value={ amount } onChange={ (e) => setAmount(e.target.value) } placeholder='Enter amount' required/>\n                </div>\n            </Row>\n\n            <br />\n            <input type='submit' className='btn btn-primary btn-block' value='Add Entry' />\n        </form>\n    )\n}\n\nexport default AddEntry\n","// contains all the fetch methods for entry\n\nconst URL = 'https://entry-book.herokuapp.com';\n\n// read all entries\nconst readAllEntries = async (bookID,token) => {\n    // const id = typeof(bookID) === 'string' ? bookID : bookID.toString()\n    const data = await fetch(URL+'/entry/'+bookID,{\n        headers:{\n            'auth-token':token\n        }\n    })\n\n    return data.json()\n}\n\nexport const readAll = readAllEntries\n\n// read an antry\nconst readOneEntry = async (bookID,entryID,token) => {\n    // const bid = typeof(bookID) === 'string' ? bookID : bookID.toString()\n    // const eid = typeof(entryID) === 'string' ? entryID : entryID.toString()\n    const data = await fetch(URL+'/entry/'+bookID+'/'+entryID,{\n        headers:{\n            'auth-token':token\n        }\n    })\n\n    return data.json()\n}\n\nexport const readOne = readOneEntry\n\n// create an entry\nconst createOneEntry = async (bookID,token,formData) => {\n    // const id = typeof(bookID) === 'string' ? bookID : bookID.toString()\n    const data = await fetch(URL+'/entry/'+bookID,{\n        method: 'POST',\n        headers:{\n            'Access-Control-Allow-Origin': '*',\n            'Content-Type': 'application/json',\n            'auth-token':token\n        },\n        body: JSON.stringify(formData)\n    })\n\n    return data.json()\n}\n\nexport const createOne = createOneEntry\n\n// update an entry\nconst updateOneEntry = async (bookID,entryID,token, formData) => {\n    // const bid = typeof(bookID) === 'string' ? bookID : bookID.toString()\n    // const eid = typeof(entryID) === 'string' ? entryID : entryID.toString()\n    const data = await fetch(URL+'/entry/'+bookID+'/'+entryID,{\n        method: 'PATCH',\n        headers:{\n            'Content-Type':'application/json',\n            'auth-token':token\n        },\n        body: JSON.stringify(formData)\n    })\n\n    return data.json()\n}\n\nexport const updateOne = updateOneEntry\n\n// delete an antry\nconst deleteOneEntry = async (bookID,entryID,token) => {\n    // const bid = typeof(bookID) === 'string' ? bookID : bookID.toString()\n    // const eid = typeof(entryID) === 'string' ? entryID : entryID.toString()\n    const data = await fetch(URL+'/entry/'+bookID+'/'+entryID,{\n        method: 'DELETE',\n        headers:{\n            'auth-token':token\n        }\n    })\n\n    return data.json()\n}\n\nexport const deleteOne = deleteOneEntry\n\n// default export object\nconst entry = {\n    readAll: readAllEntries,\n    readOne: readOneEntry,\n    createOne: createOneEntry,\n    updateOne: updateOneEntry,\n    deleteOne: deleteOneEntry\n}\n\nexport default entry","import { useState, useEffect } from 'react'\nimport { useHistory, useParams } from 'react-router-dom'\nimport Header from './partials/_Header'\nimport Container from 'react-bootstrap/Container'\nimport EntryList from './partials/_EntryList'\nimport AddEntry from './partials/_AddEntry'\n\nimport { readOne } from '../controllers/book'\nimport { createOne, deleteOne, updateOne } from '../controllers/entry'\nimport getCookie from '../controllers/additionals'\n\nconst BookDashboard = () => {\n\n    // first, find the book with bookID\n\n    // then set the book tasks to tasks\n\n    const [toggleForm, setToggleForm] = useState(false)\n    const [entries, setEntries] = useState([])\n    const [bookTitle, setBookTitle] = useState('')\n\n    const history = useHistory()\n\n    const { bookID } = useParams()\n\n    // console.log(bookID)\n\n    // let book;\n\n    const token = getCookie('token');\n    const userID = getCookie('entry-app-user-id');\n    const userName = getCookie('entry-app-user-name');\n    // console.log(user)\n\n    if(token === undefined){\n        history.push('/')\n    }\n\n    useEffect(() => {\n        const requiredBook = async () => {\n           try {\n                const book = await readOne(token, bookID)\n                if(book.result !== null){\n                    setBookTitle(book.result.title)\n                    setEntries(book.result.entries)\n                }else{\n                    history.push('/500')\n                }\n           } catch (error) {\n               history.push('/500')\n           }\n        }\n\n        requiredBook()\n    }, [entries, token, bookID, history])\n\n    // add entry function\n    const addEntry = async (bookID, token, formData) => {\n        const newAddedEntries = await createOne(bookID, token, formData)\n        setEntries([...entries,newAddedEntries.result.entries])   \n    }\n\n    // delete entry function\n    const deleteEntry = async(bookID, entryID, token) => {\n        await deleteOne(bookID, entryID,token)\n        setEntries(entries.filter = (entry) => entry._id !== entryID)\n    }\n\n    // update entry function\n    const updateEntry = async(bookID, entryID, token, formData) => {\n        const data = await updateOne(bookID, entryID, token, formData)\n        console.log(data)\n    }\n\n    return (\n        <>\n            <Header  user = { userName }/>\n            <Container>\n                <h1 className='page-title font-weight-normal pb-3'> { bookTitle } </h1>\n\n                <h3 className='page-title font-weight-normal pb-3'> Entries </h3>\n\n                <button className='btn btn-primary' onClick={ () => setToggleForm(!toggleForm) }>\n                    Add New Entry\n                </button>\n\n                { toggleForm && <AddEntry  onAdd = { addEntry } bookID = { bookID } token = { token } userID = { userID }/> }\n\n                <EntryList entries = { entries } token = { token } bookID = { bookID } onDelete = { deleteEntry } onUpdate = { updateEntry }/>\n\n\n            </Container>\n\n        </>\n    )\n}\n\nexport default BookDashboard\n","import { useState } from 'react'\n\nconst UpdateUser = ({ onUpdate, userID, token }) => {\n\n    const [password, setPassword] = useState('')\n\n    const onSubmit = (e) => {\n        e.preventDefault()\n\n        if(!password){\n            alert('Please enter password.')\n            return\n        }\n\n        // here we update password\n        const formData = {\n            password: password\n        }\n\n        onUpdate(userID, token, formData)\n\n        //for now, console,log the password\n        console.log(password);\n\n        //reset the fields\n        setPassword('')\n    }\n\n    return (\n        <form onSubmit = {onSubmit} >\n            <br />\n            <input type='password' className='form-control' value={password} onChange = { (e) => setPassword(e.target.value) } placeholder='Enter New Password'/>\n            <input type='submit' className='btn btn-primary' value='Update Password'/>\n        </form>\n    )\n}\n\nexport default UpdateUser\n","import { useState, useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport Header from './partials/_Header'\nimport UpdateUser from './partials/_UpdateUser'\nimport Container from 'react-bootstrap/Container'\nimport Button from 'react-bootstrap/Button'\n\nimport { readOne, updateOne } from '../controllers/user'\nimport getCookie from '../controllers/additionals'\n\nconst Profile = () => {\n\n    const [toggleForm, setToggleForm] = useState(false);\n    const [email, setEmail] = useState('')\n    const [MNO, setMNO] = useState('')\n   \n    const token = getCookie('token');\n    const userID = getCookie('entry-app-user-id');\n    const userName = getCookie('entry-app-user-name');\n\n    const history = useHistory()\n\n    useEffect(() => {\n        const readLoggedInUser = async () => {\n           try {\n                const data = await readOne(userID, token) \n                if(data.result !== null){\n                    setEmail(data.result.email)\n                    setMNO(data.result.mobileNumber)\n                }else{\n                    history.push('/500')\n                }\n           } catch (error) {\n               history.push('/500')\n           }\n        }\n\n        readLoggedInUser()\n    },[userID, token,history])\n\n    // update user password\n    const updatePass = async (userID, token, formData) => {\n        await updateOne(userID, token, formData)\n    }\n\n    return (\n        <>\n            <Header  user = { userName }/>\n            <Container>\n                <h1> { userName } </h1>\n                <h3> { email } </h3>\n                <h3> { MNO } </h3>\n\n                <Button varient='primary' onClick = { () => setToggleForm(!toggleForm) }>\n                    Update Password\n                </Button>\n\n                { toggleForm && <UpdateUser  onUpdate = { updatePass } userID = { userID } token = { token }/> }\n\n            </Container>\n        </>  \n    )\n}\n\nexport default Profile\n","import Card from 'react-bootstrap/Card'\n\nconst Message = ({ message,token, onDelete }) => {\n    return (\n        <div className='col-md-6'>\n            <Card>\n            <Card.Body>\n                <Card.Title className='message-text'>\n                   { message.meg }\n                </Card.Title>\n                <Card.Subtitle className='message-sender'>\n                    { message.senderFirstName + ' ' +  message.senderLastName }\n                </Card.Subtitle>\n                <Card.Link onClick ={ () =>  onDelete(token, message._id)}> Delete </Card.Link>\n            </Card.Body>    \n        </Card>\n        </div>\n    )\n}\n\nexport default Message\n","import Row from 'react-bootstrap/Row'\nimport Message from './_Message'\n\nconst _MessagesList = ({ messages, token, onDelete }) => {\n    return (\n        <Row>\n            {messages.length === 0 ? 'No messages found' : \n                messages.map((message) => (\n                    <Message key = { message._id } message = { message } token = { token } onDelete = { onDelete }/>\n                ))\n            }\n        </Row>\n    )\n}\n\nexport default _MessagesList\n","import { useState } from 'react'\n\nconst SendMessageForm = ({ onAdd, token }) => {\n\n    const [idValue, setIdValue] = useState('')\n    const [message, setMessage] = useState('')\n\n    const onSubmit = (e) => {\n\n        e.preventDefault()\n\n        if(!idValue || !message){\n            alert('Please fill in the required fields')\n            return\n        }\n\n        // here we will send the message\n        const formData = {\n            msg: message\n        }\n\n        onAdd(token ,idValue, formData)\n\n        // for now, console.log the id and the message\n        console.log('id ', idValue)\n        console.log('message ', message)\n\n        //reset the fields\n        setIdValue('')\n        setMessage('')\n    }\n\n    return (\n        <form onSubmit={ onSubmit }>\n            {/* Recipient's ID (for now, will be chaged to email later) */}\n            <br />\n            <input type='text' className='form-control' id='recipient-id' value={ idValue } onChange={ (e) => setIdValue(e.target.value ) } placeholder=' Please enter the id.'/>\n\n            {/* Message */}\n            <input type='text' className='form-control' id='recipient-id' value={ message } onChange={ (e) => setMessage(e.target.value ) } placeholder=' Please enter the message.'/>\n\n            <input type='submit' className='btn btn-primary' value='Send Message'/>\n\n\n            {/* Other values will be filled with logged in values */}\n        </form>\n    )\n}\n\nexport default SendMessageForm\n","import { useState, useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport MessagesList from './partials/_MessagesList'\nimport SendMessageForm from './partials/_SendMessageForm'\nimport Header from './partials/_Header'\nimport Container from 'react-bootstrap/Container'\nimport Button from 'react-bootstrap/Button'\n\nimport { readAllMessages,sendOneMessage, deleteOneMessage } from '../controllers/user'\nimport getCookie from '../controllers/additionals'\n\nconst Messages = () => {\n\n    const [messageFormToggle, setMessageFormToggle] = useState(false);\n    const [messages, setMessages] = useState([]);\n\n    const token = getCookie('token')\n    // const userID = getCookie('entry-app-user-id');\n    const userName = getCookie('entry-app-user-name');\n\n    const history = useHistory()\n\n    useEffect(() => {\n        const getMessages = async() => {\n            try {\n                const data = await readAllMessages(token)\n                if(data.result !== null){\n                    setMessages(data.result)\n                }else{\n                    history.push('/500')\n                }\n            } catch (error) {\n                history.push('/500')\n            }\n        }\n\n        getMessages()\n    },[token, history])\n\n    // send message function\n    const sendMessage = async(token, receiverID, formData) => {\n        await sendOneMessage(token,receiverID,formData)\n    }\n\n    // delete message function\n    const deleteMessages = async(token, messageID) => {\n        await deleteOneMessage(token,messageID)\n    }\n\n    return (\n        <>\n            <Header  user = { userName }/>\n            <Container>\n            <h1> Messages </h1>\n\n                <MessagesList messages = { messages } onDelete = { deleteMessages } token = { token }/>\n                <Button varient='primary' onClick={ () => setMessageFormToggle(!messageFormToggle) }> Send Message </Button>\n\n                { messageFormToggle && <SendMessageForm  onAdd = { sendMessage } token = { token }/> }\n            </Container>\n        </>\n    )\n}\n\nexport default Messages","import  Container  from 'react-bootstrap/Container'\nimport { Link } from 'react-router-dom'\n\nconst Error404 = () => {\n    return (\n        <Container>\n            <h1> Error : 404 </h1>\n            <p> Requested page not found </p>\n            <Link to='/user'> Go back </Link>\n        </Container>\n    )\n}\n\nexport default Error404\n","import  Container  from 'react-bootstrap/Container'\nimport { Link } from 'react-router-dom'\n\nconst Error500 = () => {\n    return (\n        <Container>\n            <h1> Error : 500 </h1>\n            <p> Error while connecting to the server </p>\n            <Link to='/user'> Go back </Link>\n        </Container>\n    )\n}\n\nexport default Error500\n","// import Container from 'react-bootstrap/Container';\nimport { useState } from 'react'\nimport { BrowserRouter as Router, Route, Link, Redirect } from 'react-router-dom';\nimport Register from \"./components/Register\";\nimport UserDashboard from \"./components/UserDashboard\";\nimport BookDashboard from \"./components/BookDashboard\";\nimport Profile from \"./components/Profile\";\nimport Messages from \"./components/Messages\";\nimport Error404 from \"./components/404\";\nimport Error500 from \"./components/500\";\n\nimport { logIn } from './controllers/user'\n\nimport './App.css';\n\nfunction App() {\n\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [redirect, setRedirect] = useState(false)\n  const [redirectTo500, setRedirectTo500] = useState(false)\n\n  const onSubmit = async (e) => {\n    e.preventDefault()\n\n    if(!email && !password){\n      alert(' Invalid Request ')\n      return\n    }\n  \n    // here goes the function which will be used to log in\n    const formData = {\n      email: email,\n      password: password\n    }\n  \n    const data = await logIn(formData)\n\n    if(data !== null){\n      document.cookie = `token=${data.result[0]};max-age=86400,domain=localhost:3000`\n      document.cookie = `entry-app-user-id=${data.result[1]._id};max-age=86400,domain=localhost:3000`\n      document.cookie = `entry-app-user-name=${data.result[1].firstName + ' '+data.result[1].lastName};max-age=86400,domain=localhost:3000`\n      document.cookie = `entry-app-user-email=${data.result[1].email};max-age=86400,domain=localhost:3000`\n\n      setRedirect(true)\n    }else{\n      setRedirectTo500(true)\n    }\n\n    setEmail('')\n    setPassword('')\n  }\n\n  return (\n    <Router>\n        <Route exact path='/' render = {(props) => (\n          <>\n          { redirectTo500 &&  <Redirect push to='/error500' component = {Error500}/>}\n          {redirect ? <Redirect push to='/user' component = {UserDashboard}/> :\n              <div className=\"signin-form-wrapper\">\n                <form onSubmit={ onSubmit } className='form-signin pt-3 pb-3'>\n                  <h1 className=\"page-title mb-3 font-weight-normal\"> Sign In </h1>\n                  <div>\n                    <label htmlFor='email'> Email </label>\n                    <input type='email' id='email' required className=\"form-control\" placeholder='Enter Email' value={ email } onChange={ (e) => setEmail(e.target.value) }/>\n                  </div>\n                  <br />\n                  <div>\n                    <label htmlFor='password'> Password </label>\n                    <input type='password' id='password' required className=\"form-control\" placeholder='enter password'  value={ password } onChange={ (e) => setPassword(e.target.value)}/>\n                  </div>\n                  <br />\n                  <input type=\"submit\" className='btn btn-primary btn-block' value='Log In' />\n                  <br />\n                  <p className='align-right'> Not registered? <Link to='/register'> Register here </Link> </p>\n                </form>\n              </div>\n            }\n          </>\n        )}>\n        </Route>\n\n        <Route exact path='/register'>\n          <Register />\n        </Route>\n\n        <Route exact path='/user'>\n          <UserDashboard />\n        </Route>\n\n        <Route exact path='/book/:bookID'>\n          <BookDashboard  />\n        </Route>\n\n        <Route exact path='/profile'>\n          <Profile />\n        </Route>\n\n        <Route exact path='/messages'>\n          <Messages />\n        </Route>\n\n        <Route exact path='/404'>\n          <Error404 />\n        </Route>\n\n        <Route exact path='/500'>\n          <Error500 />\n        </Route>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}